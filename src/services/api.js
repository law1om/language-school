export const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';

// –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
const DEBUG = true;

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
function logApiRequest(endpoint, method, data = null) {
  if (DEBUG) {
    console.log(`üîπ API Request: ${method} ${endpoint}`);
    if (data) {
      console.log('Request data:', data);
    }
  }
}

function logApiResponse(endpoint, status, data = null) {
  if (DEBUG) {
    console.log(`üî∏ API Response: ${status} ${endpoint}`);
    if (data) {
      console.log('Response data:', data);
    }
  }
}

function logApiError(endpoint, error) {
  if (DEBUG) {
    console.error(`‚ùå API Error: ${endpoint}`);
    console.error(error);
  }
}

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
const cache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
const isCacheValid = (timestamp) => {
  return Date.now() - timestamp < CACHE_DURATION;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
const getFromCache = (key) => {
  const cached = cache.get(key);
  if (cached && isCacheValid(cached.timestamp)) {
    return cached.data;
  }
  cache.delete(key);
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
const setCache = (key, data) => {
  cache.set(key, {
    data,
    timestamp: Date.now()
  });
};

// –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ API
class APIError extends Error {
  constructor(message, status, data = null) {
    super(message);
    this.name = 'APIError';
    this.status = status;
    this.data = data;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function fetchWithRetry(endpoint, options = {}, retries = 3) {
  const token = localStorage.getItem('token');
  
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers,
  };
  
  if (token) {
    headers.Authorization = `Bearer ${token}`;
  }

  const config = {
    ...options,
    headers,
  };

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  logApiRequest(endpoint, options.method || 'GET', options.body);

  let lastError;
  
  for (let i = 0; i < retries; i++) {
    try {
      const response = await fetch(`${API_URL}${endpoint}`, config);
      
      let data;
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        data = await response.json();
      } else {
        data = await response.text();
      }

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      logApiResponse(endpoint, response.status, data);

      if (!response.ok) {
        throw new APIError(
          data.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`,
          response.status,
          data
        );
      }

      return data;
    } catch (error) {
      lastError = error;
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      logApiError(endpoint, error);
      
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
      if (error.status === 401 || error.status === 403 || error.status === 404) {
        throw error;
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      if (i < retries - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, i)));
      }
    }
  }

  throw lastError;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function fetchWithCache(endpoint, options = {}) {
  const cacheKey = `${endpoint}${JSON.stringify(options)}`;
  const cachedData = getFromCache(cacheKey);
  
  if (cachedData) {
    return cachedData;
  }

  const data = await fetchWithRetry(endpoint, options);
  setCache(cacheKey, data);
  return data;
}

// API –º–µ—Ç–æ–¥—ã
export async function login(credentials) {
  return fetchWithRetry('/auth/login', {
    method: 'POST',
    body: JSON.stringify(credentials),
  });
}

export async function register(userData) {
  return fetchWithRetry('/auth/register', {
    method: 'POST',
    body: JSON.stringify(userData),
  });
}

export async function getCourses(filters = {}) {
  const queryString = new URLSearchParams(filters).toString();
  return fetchWithCache(`/courses${queryString ? `?${queryString}` : ''}`);
}

export async function getCourseDetails(courseId) {
  return fetchWithCache(`/courses/${courseId}`);
}

export async function getEnrollments() {
  return fetchWithCache('/user/enrollments');
}

export async function enrollInCourse(courseId) {
  return fetchWithRetry('/enrollments', {
    method: 'POST',
    body: JSON.stringify({ courseId }),
  });
}

// –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏
export async function createReview(reviewData) {
  return fetchWithRetry('/reviews', {
    method: 'POST',
    body: JSON.stringify(reviewData),
  });
}

export async function getCourseReviews(courseId) {
  return fetchWithCache(`/courses/${courseId}/reviews`);
}

export async function getUserReviewForCourse(courseId) {
  return fetchWithCache(`/courses/${courseId}/reviews/user`);
}

export async function deleteReview(reviewId) {
  return fetchWithRetry(`/reviews/${reviewId}`, {
    method: 'DELETE',
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º
export function setToken(token) {
  localStorage.setItem('token', token);
}

export function getToken() {
  return localStorage.getItem('token');
}

export function removeToken() {
  localStorage.removeItem('token');
  cache.clear();
}

export function isAuthenticated() {
  return !!localStorage.getItem('token');
}

export function getUserFromToken() {
  const token = localStorage.getItem('token');
  console.log('–¢–æ–∫–µ–Ω:', token); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

  if (!token) return null;
  
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(window.atob(base64));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    const expDate = new Date(payload.exp * 1000);
    console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç:', expDate);
    if (Date.now() >= payload.exp * 1000) {
      console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫!');
      return null;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      id: payload.userId,
      email: payload.email,
      role: payload.role
    };
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:', userData);
    
    return userData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞:', error);
    return null;
  }
}

export async function getCourseLearningMaterials(courseId) {
  return fetchWithCache(`/courses/${courseId}/learning`);
}

export async function updateUserCourseProgress(courseId, data) {
  return fetchWithRetry(`/courses/${courseId}/progress`, {
    method: 'POST',
    body: JSON.stringify(data),
  });
}

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
export async function getAllUsers() {
  console.log('üîç –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ getAllUsers');
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const userToken = getToken();
    if (!userToken) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω');
      throw new APIError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 401);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUser = getUserFromToken();
    if (!currentUser || currentUser.role !== 'ADMIN') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
      throw new APIError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 403);
    }
    
    const data = await fetchWithRetry('/admin/users', {
      method: 'GET',
    });
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data);
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    throw error;
  }
}

export async function getUserById(userId) {
  return fetchWithRetry(`/admin/users/${userId}`, {
    method: 'GET',
  });
}

export async function getUserEnrollments(userId) {
  return fetchWithRetry(`/admin/users/${userId}/enrollments`, {
    method: 'GET',
  });
}

export async function createCourse(courseData) {
  return fetchWithRetry('/admin/courses', {
    method: 'POST',
    body: JSON.stringify(courseData),
  });
}

export async function updateCourse(courseId, courseData) {
  return fetchWithRetry(`/admin/courses/${courseId}`, {
    method: 'PUT',
    body: JSON.stringify(courseData),
  });
}

export async function deleteCourse(courseId) {
  return fetchWithRetry(`/admin/courses/${courseId}`, {
    method: 'DELETE',
  });
}

export async function deleteUser(userId) {
  return fetchWithRetry(`/admin/users/${userId}`, {
    method: 'DELETE',
  });
}

export function isAdmin() {
  const user = getUserFromToken();
  return user && user.role === 'ADMIN';
} 